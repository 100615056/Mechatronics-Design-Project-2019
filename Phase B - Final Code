#include <DueTimer.h>
#include <Encoder.h>
#include <Servo.h>
#include <CytronMotorDriver.h>


// Configure the motor driver.
CytronMD LeftMotor(PWM_DIR, 5, 4);   // PWM 1A = Pin 5, PWM 1B = Pin 4. //Left Motor
CytronMD RightMotor(PWM_DIR, 6, 7); // PWM 2A = Pin 6, PWM 2B = Pin 7. //Right Motor

//Encoder Configurations

Encoder EncoderLeft(24, 25); //Left Encoder
Encoder EncoderRight(22, 23); //Right Encoder

//Speed Calculation Variables
float LeftSpeed = 0;
float RightSpeed = 0;

float OldLeftPosition, NewLeftPosition;
float OldRightPosition, NewRightPosition;

float LeftPositionChange, RightPositionChange;
float LeftChange, RightChange; //For Odometry in ActualWheelSpeeds function
float LSpeed, RSpeed;

//Sensor Configurations Input of 3.3 V

int RightIRPin = A0; //On Right
int FrontIRPin = A1; //In Front

int RightReading, FrontReading;

float RightDistance, FrontDistance;

//PID Configuration

//Left Wheel
double Lkp = 15;
double Lki = 10;
double Lkd = -3;

double L_Error, L_PreviousError, L_LastError;
double L_Input, L_ControlTerm;
double L_CumulativeError, L_RateError;
double LeftSetPoint = 0;
double LeftPWM = 0;

//RightWheel

double Rkp = 15;
double Rki = 10;
double Rkd = -3;

double R_Error, R_PreviousError, R_LastError;
double R_Input, R_ControlTerm;
double RightSetPoint = 0;
double R_CumulativeError, R_RateError;

double RightPWM = 0;

//Wheel Odometry

#define PI 3.14159

float theta = 1.5707963268; //rad (90 degrees)1.5707963268
float delta_distance, delta_theta;
float delta_left = 0;
float delta_right = 0;

float current_x_position = 0;
float current_y_position = 0;

const double wheelbase = 9.7; //cm

//WayPoint Check
float future_x_position, future_y_position;
float x_change, y_change;

double remaining_distance;
double desired_heading;

double sign_of_heading_error = 0;
double heading_error = 0;
int waypoint_counter = 0;

//Servo

Servo ServoLeft;
Servo ServoRight;

int LeftServo = 0;
int RightServo = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial1.begin(9600);

  ServoLeft.attach(8);// attaches the left servo on pin 9 to the servo object
  ServoRight.attach(9); //attaches right servo to pin 8

  Timer1.attachInterrupt(TimerInterrupt);
  Timer1.start(80000); // Calls every 80ms
}

void TimerInterrupt() {
  ReadSensors();
  CalculateActualWheelSpeeds();
  L_ControlTerm = LeftW_PID(EncToDist(LeftSpeed));
  R_ControlTerm = RightW_PID(EncToDist(RightSpeed));

  LeftPWM = LeftSpeed2PWM(LeftSetPoint) + L_ControlTerm; //Adjust Left Wheel Speed
  RightPWM = RightSpeed2PWM(RightSetPoint) + R_ControlTerm; //Adjust Right Wheel Speed
  MotorSpeeds(LeftPWM, RightPWM);
  WheelOdometry();
  WayPointCheck();
  RunServo();
  }


  void loop() {
  //WayPointPrint();
  //OdometryPrint();
  //WheelPrint();
  delay(100);
}


void RunServo() {
  for (int i = 0; i < 90; i += 1) {
    RightServo = 180;     // servoright doesn't move            
    LeftServo = 0;        // servoleft doesnt move
    ServoRight.write(RightServo);
    ServoLeft.write(LeftServo);
    delay(100);   
  }
  
  //Step 2
  for (int i = 0; i < 90; i += 1) {
    RightServo = 90 + i;       // servoright from 90 to 180 degrees
    LeftServo = 90 - i;         // servoleft from 90 to 0 degrees
    
    //the reason the servos move in different rotations is because of the way the motor is facing.
    ServoRight.write(RightServo);
    ServoLeft.write(LeftServo);
    delay(200);                    // waits for the servo to get there
  }
  //Step 3
  for (int i = 0; i < 90; i += 1) {
    RightServo = 180;           // servoright doesn't move
    LeftServo = 0;              // servoleft doesnt move
    ServoRight.write(RightServo);
    ServoLeft.write(LeftServo);
    delay(100);
  }
}
double WayPoints[4][2] = {{0, 35}, {35, 35}, {35, 0}, {0, 0}}; //{{0, 17.6}, {19.7, 19.7}}; //WayPoint Array

//Functions


//Function for Navigation through the maze using the wheel odometry values to calculate the desired direction and remaining distance from Way Points
void WayPointCheck() {

  future_x_position = WayPoints[0][waypoint_counter];
  future_y_position = WayPoints[1][waypoint_counter];

  x_change = future_x_position - current_x_position;
  y_change = future_y_position - current_y_position;

  remaining_distance = sqrt(pow(x_change, 2) + pow(y_change, 2));
  desired_heading = atan2(y_change, x_change);// * 180 / PI;


  if (remaining_distance < 0.5)
  {
    waypoint_counter++;
  }

  heading_error = (desired_heading - theta);// * 180 / PI;

  while (heading_error > PI)
  {
    heading_error = heading_error - PI;
  }
  while (heading_error < -PI)
  {
    heading_error = heading_error + PI;
  }


  float sign = 0;
  if (heading_error > 0)
  {
    sign = 1;
  }
  else
  {
    sign = -1;
  }

  if (abs(heading_error) > 0.08)
  {
    LeftSetPoint = -sign * 2;
    RightSetPoint = sign * 2;
  }
  else
  {
    LeftSetPoint = 5;//-heading_error*15*sign;
    RightSetPoint = 5;//+heading_error*15*sign;
  }
}

//Function to print values from WayPointCheck()
void WayPointPrint() {
  Serial.print(" desired_heading ");
  Serial.print(desired_heading * 180 / PI);
  //Serial1.print(" theta: ");
  //Serial1.print(theta * 180 / PI);
  //Serial.print(" wayPoint: ");
  //Serial.print(waypoint_counter);
  Serial.print(" dist: ");
  Serial.print(remaining_distance);
  Serial.print(" heading error: ");
  Serial.println(heading_error * 180 / PI);

}

//Function to do the positions and angels for Wheel Odemtry - Level 2
void WheelOdometry()
{
  delta_distance = (delta_left + delta_right) / 2; //distance travelled

  delta_theta = (delta_right - delta_left) / wheelbase;

  theta = theta + delta_theta; //current angle

  current_x_position = current_x_position + delta_distance * cos(theta);
  current_y_position = current_y_position + delta_distance * sin(theta);
}

//Function to print OdometryPrint() values
void OdometryPrint() {
  Serial.print(" dl: ");
  Serial.print(delta_left);
  Serial.print(" dr: ");
  Serial.print(delta_right);
  Serial.print(" theta: ");
  Serial.print(theta * 180 / PI);
  Serial.print(" x: ");
  Serial.print(current_x_position);
  Serial.print(" y: ");
  Serial.print(current_y_position);
  Serial.println();
}


//Function to limit the speed input values - Level 1

void MotorSpeeds(int lmotor, int rmotor)
{
  if (lmotor > 255)
  {
    LeftMotor.setSpeed(255);
  }
  if (lmotor < -255)
  {
    LeftMotor.setSpeed(-255);
  }
  else
    LeftMotor.setSpeed(lmotor);

  if (rmotor > 255)
  {
    RightMotor.setSpeed(255);
  }
  if (rmotor < -255)
  {
    RightMotor.setSpeed(-255);
  }
  else {
    RightMotor.setSpeed(rmotor);
  }
}

//Function to test the kp,ki,kd values for the PID controller through the serial monitor
void SerialInput() {
  while (Serial.available() > 0) {
    Lkp = Serial.parseInt();
    Lki = Serial.parseInt();
    Lkd = Serial.parseInt();
    if (Serial.read() == '\n') {
    }
    Serial.print(" Speed: ");
    Serial.print(EncToDist(LeftSpeed));
    Serial.print(" Rkp: ");
    Serial.print(Lkp);
    Serial.print(" Rki: ");
    Serial.print(Lki);
    Serial.print(" Rkd: ");
    Serial.println(Lkd);
  }
}

//PID Control Terms for Both Wheels - Level 1

double LeftW_PID(double Lmeasurement) { //Calculate Left Motor PID term
  L_Error = LeftSetPoint - Lmeasurement;
  L_CumulativeError += L_Error;
  L_RateError = L_LastError - L_Error;
  double Lout = Lkp * L_Error + Lki * L_CumulativeError + Lkd * L_RateError;
  //Serial.println(out);
  L_LastError = L_Error;
  return Lout;
}

double RightW_PID(double Rmeasurement) { //Calculate Right Motor PID term
  R_Error = RightSetPoint - Rmeasurement;
  R_CumulativeError += R_Error;
  R_RateError = R_LastError - R_Error;
  double Rout = Rkp * R_Error + Rki * R_CumulativeError + Rkd * R_RateError;
  //Serial.println(out);
  R_LastError = R_Error;
  return Rout;
}

//Function to go from Speed Value to PWM - Level 1
float LeftSpeed2PWM(float LSpeed) {

  if (LSpeed < 0)
  {
    LSpeed = LSpeed * -1;
    return -(0.0023 * pow(LSpeed, 4) - 0.0866 * pow(LSpeed, 3) + 1.1141 * pow(LSpeed, 2) - (2.0614 * LSpeed) + 40.738);
  }
  else
    return 0.0023 * pow(LSpeed, 4) - 0.0866 * pow(LSpeed, 3) + 1.1141 * pow(LSpeed, 2) - (2.0614 * LSpeed) + 40.738;
}

float RightSpeed2PWM(float RSpeed) { //Function to go from Speed Value to PWM
  if (RSpeed < 0) {
    RSpeed = RSpeed * -1;
    return -(0.0023 * pow(RSpeed, 4) - 0.0866 * pow(RSpeed, 3) + 1.1141 * pow(RSpeed, 2) - (2.0614 * RSpeed) + 40.738);
  }
  else
    return 0.0023 * pow(RSpeed, 4) - 0.0866 * pow(RSpeed, 3) + 1.1141 * pow(RSpeed, 2) - (2.0614 * RSpeed) + 40.738;
}

//Function to print values from CalculateActualWheelSpeeds()
void WheelPrint() {
  Serial.print(" Left ");
  Serial.print(EncToDist(NewLeftPosition));
  Serial.print(" Right: ");
  Serial.print(EncToDist(NewRightPosition));
  Serial.print(" LeftSpeed: ");
  Serial.print(EncToDist(LeftSpeed));
  Serial.print(" RightSpeed: ");
  Serial.println(EncToDist(RightSpeed));
  //Serial.println(translation);
  delay(100);
}

//To go from encoder value to distance
float EncToDist(float EncoderValue) { //Base Level
  return EncoderValue / 311.38;
}

//Calculate Wheel Positions and Wheel Speeds

void CalculateActualWheelSpeeds() { //Base Level
  //Motor Position and Speed
  NewLeftPosition = EncoderLeft.read();
  NewRightPosition = EncoderRight.read();

  LeftPositionChange = NewLeftPosition - OldLeftPosition; //Change in Left Position
  RightPositionChange = NewRightPosition - OldRightPosition; //Change in Right Position

  LeftSpeed = (LeftPositionChange) / 0.08; //ticks per second
  RightSpeed = (RightPositionChange) / 0.08; //ticks per second

  //For Odometry
  LeftChange = LeftPositionChange;
  RightChange = RightPositionChange;

  delta_left = EncToDist(LeftChange);
  delta_right = EncToDist(RightChange);

  //Update Positions
  OldLeftPosition = NewLeftPosition;
  OldRightPosition = NewRightPosition;
}

// Function to read IR distance sensor values -  Base Level
void ReadSensors() {

  //IR Distance Sensors
  int RightReading = analogRead(RightIRPin);
  int FrontReading = analogRead(FrontIRPin);
  for (int i = 0; i < 20; i++)
  {
    RightReading = RightReading + analogRead(RightIRPin);
    FrontReading = FrontReading + analogRead(FrontIRPin);
  }
  RightReading = RightReading / 20;
  FrontReading = FrontReading / 20;

  //IR_distance = 3.874E+17 * pow(reading, -5.871);
  RightDistance = (-0.0852 * RightReading) + 67.61;
  FrontDistance = (-0.0852 * FrontReading) + 67.61;
}
